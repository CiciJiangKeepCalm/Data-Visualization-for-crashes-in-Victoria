};
'
##
appCSS <- "
#loading-content {
position: absolute;
background: #000000;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"
shiny::runApp()
runApp()
library(dplyr)
library(ggplot2)
runApp()
library(ggplotly)
install.packages('ggplotly')
runApp()
runApp()
runApp()
library(plotly)
runApp()
runApp()
hh <- group_by(myData,ACCIDENT_TIME,LIGHT_CONDITION)  %>%
summarise(Amount = n())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
hh <- hh[which(hh$LIGHT_CONDITION!="Unk." ),]
write.csv(hh, file = "Light_time.csv")
Light_time <- read.csv('Light_time.csv')
View(Light_time)
runApp()
runApp()
runApp()
runApp()
runApp()
hh <- hh[which(hh$LIGHT_CONDITION!="Unk." ),]
hh <- hh[which(hh$LIGHT_CONDITION!="Dark Street lights unknown" ),]
write.csv(hh, file = "Light_time.csv")
Light_time <- read.csv('Light_time.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
AC <- group_by(myData,ACCIDENT_TIME,ACCIDENT_TYPE)  %>%
summarise(Amount = n())
View(AC)
write.csv(AC, file = "type_time.csv")
type_time <- read.csv('type_time.csv')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(type_time)
View(LIGHT_CONDITION)
View(Light_time)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(datasets)
library(dplyr)
library(xlsx)
library(shinyjs)
library(leaflet.extras)
library(htmltools)
library(htmlwidgets)
##library(magrittr)
library(V8)
library(shinythemes)
library(googleVis)
library(dplyr)
library(ggplot2)
##library(ggplotly)
library(plotly)
LIGHT_CONDITION <- read.csv('LIGHT_CONDITION.csv')
myData <- read.csv('data.csv')
dataRegionYear <- read.csv('dataRegionYear.csv')
dataYear <- read.csv('dataYear.csv')
dataLight <- read.csv('dataLight.csv')
Severity <- read.csv('SEVERITY.csv')
Light_time <- read.csv('Light_time.csv')
type <- read.csv('type.csv')
type_time <- read.csv('type_time.csv')
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
##
appCSS <- "
#loading-content {
position: absolute;
background: #000000;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"
runApp()
library(datasets)
library(dplyr)
library(xlsx)
library(shinyjs)
library(leaflet.extras)
library(htmltools)
library(htmlwidgets)
##library(magrittr)
library(V8)
library(shinythemes)
library(googleVis)
library(dplyr)
library(ggplot2)
##library(ggplotly)
library(plotly)
LIGHT_CONDITION <- read.csv('LIGHT_CONDITION.csv')
myData <- read.csv('data.csv')
dataRegionYear <- read.csv('dataRegionYear.csv')
dataYear <- read.csv('dataYear.csv')
dataLight <- read.csv('dataLight.csv')
Severity <- read.csv('SEVERITY.csv')
Light_time <- read.csv('Light_time.csv')
type <- read.csv('type.csv')
type_time <- read.csv('type_time.csv')
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
##
appCSS <- "
#loading-content {
position: absolute;
background: #000000;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(datasets)
#library(dplyr)
library(xlsx)
library(shinyjs)
library(leaflet.extras)
library(htmltools)
##library(htmlwidgets)
##library(magrittr)
library(V8)
library(shinythemes)
library(googleVis)
library(ggplot2)
##library(ggplotly)
library(plotly)
LIGHT_CONDITION <- read.csv('LIGHT_CONDITION.csv')
myData <- read.csv('data.csv')
dataRegionYear <- read.csv('dataRegionYear.csv')
dataYear <- read.csv('dataYear.csv')
dataLight <- read.csv('dataLight.csv')
Severity <- read.csv('SEVERITY.csv')
Light_time <- read.csv('Light_time.csv')
type <- read.csv('type.csv')
type_time <- read.csv('type_time.csv')
# fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
shiny::runApp()
library(datasets)
library(xlsx)
library(shinyjs)
library(leaflet.extras)
library(htmltools)
library(V8)
library(shinythemes)
library(googleVis)
library(ggplot2)
library(plotly)
## read data
LIGHT_CONDITION <- read.csv('LIGHT_CONDITION.csv')
myData <- read.csv('data.csv')
dataRegionYear <- read.csv('dataRegionYear.csv')
dataYear <- read.csv('dataYear.csv')
dataLight <- read.csv('dataLight.csv')
Severity <- read.csv('SEVERITY.csv')
Light_time <- read.csv('Light_time.csv')
type <- read.csv('type.csv')
type_time <- read.csv('type_time.csv')
# fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
runApp()
runApp()
library(datasets)
library(dplyr)
library(xlsx)
library(shinyjs)
library(leaflet.extras)
library(htmltools)
library(htmlwidgets)
library(magrittr)
library(V8)
library(shinythemes)
LIGHT_CONDITION <- read.csv('LIGHT_CONDITION.csv')
myData <- read.csv('data.csv')
dataRegionYear <- read.csv('dataRegionYear.csv')
dataYear <- read.csv('dataYear.csv')
dataLight <- read.csv('dataLight.csv')
Severity <- read.csv('SEVERITY.csv')
data2 <- group_by(myData,ACCIDENT_TYPE,ACCIDENT_Year)  %>%
summarise(Amount = n())
write.csv(data2, file = "type.csv")
type <- read.csv('type.csv')
M1<- gvisMotionChart(type, idvar="ACCIDENT_TYPE", timevar="ACCIDENT_Year")
plot(M1)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
##
appCSS <- "
#loading-content {
position: absolute;
background: #000000;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"
shiny::runApp()
library(datasets)
library(dplyr)
library(xlsx)
library(shinyjs)
library(leaflet.extras)
library(htmltools)
library(htmlwidgets)
library(magrittr)
library(plotly)
library(V8)
library(shinythemes)
LIGHT_CONDITION <- read.csv('LIGHT_CONDITION.csv')
myData <- read.csv('data.csv')
dataRegionYear <- read.csv('dataRegionYear.csv')
dataYear <- read.csv('dataYear.csv')
dataLight <- read.csv('dataLight.csv')
Severity <- read.csv('SEVERITY.csv')
data2 <- group_by(myData,ACCIDENT_TYPE,ACCIDENT_Year)  %>%
summarise(Amount = n())
write.csv(data2, file = "type.csv")
type <- read.csv('type.csv')
M1<- gvisMotionChart(type, idvar="ACCIDENT_TYPE", timevar="ACCIDENT_Year")
plot(M1)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
##
appCSS <- "
#loading-content {
position: absolute;
background: #000000;
opacity: 0.9;
z-index: 100;
left: 0;
right: 0;
height: 100%;
text-align: center;
color: #FFFFFF;
}
"
runApp()
library(datasets)
library(xlsx)
library(shinyjs)
library(leaflet.extras)
library(htmltools)
library(V8)
library(shinythemes)
library(googleVis)
library(ggplot2)
library(plotly)
## read data
LIGHT_CONDITION <- read.csv('LIGHT_CONDITION.csv')
myData <- read.csv('data.csv')
dataRegionYear <- read.csv('dataRegionYear.csv')
dataYear <- read.csv('dataYear.csv')
dataLight <- read.csv('dataLight.csv')
Severity <- read.csv('SEVERITY.csv')
Light_time <- read.csv('Light_time.csv')
type <- read.csv('type.csv')
type_time <- read.csv('type_time.csv')
# fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
runApp()
M <-gvisMotionChart(Severity,idvar='SEVERITY',timevar = 'ACCIDENT_Year')
plot(M)
library(datasets)
library(xlsx)
library(shinyjs)
library(leaflet.extras)
library(htmltools)
library(V8)
library(shinythemes)
library(googleVis)
library(ggplot2)
library(plotly)
## read data
LIGHT_CONDITION <- read.csv('LIGHT_CONDITION.csv')
myData <- read.csv('data.csv')
dataRegionYear <- read.csv('dataRegionYear.csv')
dataYear <- read.csv('dataYear.csv')
dataLight <- read.csv('dataLight.csv')
Severity <- read.csv('SEVERITY.csv')
Light_time <- read.csv('Light_time.csv')
type <- read.csv('type.csv')
type_time <- read.csv('type_time.csv')
# fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
shiny::runApp()
